% Sweave(file = './trio.Rnw')
% , driver = cacheSweaveDriver)
\documentclass[10pt]{article}
<<echo=FALSE>>=
  options(width=70, continue = " ")
@ 
\SweaveOpts{eps=FALSE,echo=TRUE,figs.only=TRUE,keep.source=FALSE, prefix.string=figures/trio}
\usepackage{fullpage}
\usepackage{times}
\usepackage[colorlinks=TRUE,urlcolor=blue,citecolor=blue]{hyperref}
%\title{TITLE}
%\author{Sam}
%\date{\today}
%\input{/home/bst/student/syounkin/jhsph/latex/sgy}
%\input{/home/sgy/jhsph/latex/sgy}
\begin{document}
\setlength{\parskip}{0.2\baselineskip}
\setlength{\parindent}{0pt}
%\maketitle
Today is \today.
%<<cachedir, echo=FALSE>>=
%setCacheDir( path = './cache/' )
%@ 
<<packages>>=
rm(list=ls())
source("~/jhsph/R/reload.R")
library("VariantAnnotation")
library("vcf2R")
library("trioClasses")
data("BMP4-european-all.geno")
data(ped, package= "trioClasses" )
@ 
<<pedigree>>=
pedigreeInfo <- within(ped.df, {
  F <- as.character(fid)
  M <- as.character(mid)
  O <- as.character(id)
})
pedigreeInfo <- subset( pedigreeInfo, !is.na(F) & !is.na(M) & !is.na(O) )
tg.ped <- Pedigree(pedigreeInfo = pedigreeInfo)
tg.ped
@ 
<<ids>>=
id <- offspringNames(tg.ped)
fid <- fatherNames(tg.ped)
mid <- motherNames(tg.ped)
names(fid) <- id
names(mid) <- id
c(length(unique(id)),length(unique(fid)),length(unique(mid)))
@ 
<<id, eval = TRUE>>=
id.vec <- colnames(geno.mat)
lll <- strsplit( x = id.vec, split = "-" )
id.vec <- as.character(data.frame((do.call( "rbind", lll )))[,3])

@ 
<<genomat>>=
genomat <- t( ifelse( geno.mat == "0/0", 0L, ifelse( geno.mat == "0/1", 1L, ifelse( geno.mat == "1/1", 2L, NA ))) )
rownames(genomat) <- id.vec
# Remove monomorphic SNPs 
genomat <- genomat[,colSums(genomat, na.rm = TRUE)!=0]

# Compute MAF
maf <- colSums(genomat, na.rm = TRUE)/2/nrow(genomat)
maf <- ifelse( maf > 0.5, 1-0.5, maf )
summary(maf)

# Create map data frame
ll <- strsplit( x = colnames(genomat), split = ":" )
map.df <- data.frame((do.call( "rbind", ll )))
names(map.df) <- c("chr", "pos" )
maf.df <- data.frame( map.df, maf = maf )
rownames(maf.df) <- NULL
head(maf.df)
@ 
<<common, eval = FALSE>>=
genomat.common <- subset( genomat, select = (maf >= 0.01) )
n.snps <- ncol(genomat.common) 
@ 
\end{document}

